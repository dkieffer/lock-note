{"version":3,"sources":["notesListItem.js","NoteArea.js","button.js","dropdown.js","OutsideWatcher.js","App.js","serviceWorker.js","index.js"],"names":["NotesListItem","props","className","title","selectedNote","id","onClick","loadNote","NoteArea","content","currentNoteData","value","onChange","event","handleTitleChange","noteKey","handleChange","placeholder","onFocus","startSaveTimer","onBlur","removeSaveTimer","Button","position","function","label","DropDown","dropDownOpen","deleteNote","currentNoteID","OutsideWatcher","setWrapperRef","bind","handleClickOutside","node","this","wrapperRef","contains","target","console","log","listen","document","addEventListener","removeEventListener","ref","children","React","Component","App","state","menuOpen","noteList","noteIndex","loadNoteIndex","currentNoteIndex","indexTicker","loadIndexTicker","smallScreen","contentTimerID","toggleMenu","toggleDropDown","saveNote","createNewNote","loadNoteData","length","viewportWidth","window","innerWidth","setState","localStorage","getItem","JSON","parse","setItem","stringify","i","indexTickerJSON","push","noteListJSON","name","originalContent","contentTimer","setInterval","clearInterval","key","note","createdDate","modifiedDate","Date","noteJSON","findIndex","noteIDs","newIndexTicker","updateNoteIndex","removeItem","newNoteList","slice","splice","noteListItems","activeTitle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94b9fc72.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NotesListItem(props) {\n    let className = '';\n    let title = props.title;\n    if (props.selectedNote === props.id) {\n        className += ' active';\n    }\n\n    return(\n        <li><button className={className} onClick={() => props.loadNote(props.id)}>{title}</button></li>\n    )\n}\n\nexport default NotesListItem","import React from 'react';\n\nfunction NoteArea(props) {\n    let title, content;\n    if (props.currentNoteData !== null) {\n        title = props.currentNoteData.title;\n        content = props.currentNoteData.content;\n    }\n    \n    return(\n        <div className=\"note-area\">\n            <textarea value={title} className=\"note-title\" onChange={(event) => props.handleTitleChange(event, props.noteKey)}></textarea>\n            <textarea value={content} className=\"note\" onChange={props.handleChange} placeholder=\"Write somethingâ€¦\" onFocus={(event) => props.startSaveTimer(event, 'contentTimer')} onBlur={() => props.removeSaveTimer('contentTimer')}></textarea>\n        </div>\n    )\n}\n\nexport default NoteArea","import React from 'react';\n\nfunction Button(props) {\n    let className = 'button ';\n    if (props.position) {\n        className += props.position;\n    }\n    \n    return(\n        <button className={className} onClick={props.function}>\n            {props.label}\n        </button>\n    )\n}\n\nexport default Button","import React from 'react';\n\nfunction DropDown(props) {\n    let className = 'drop-down';\n    if (props.dropDownOpen) {\n        className += ' -active';\n    }\n    \n    return(\n        <div className={className}>\n            <button className=\"dropDown__button\" onClick={() => props.deleteNote(props.currentNoteID)}>Delete Note</button>\n        </div>\n    )\n}\n\nexport default DropDown","import React from 'react';\n\n/**\n * Component that alerts if you click outside of it\n */\nclass OutsideWatcher extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    // document.addEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    // document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  /**\n   * Set the wrapper ref\n   */\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  /**\n   * Alert if clicked on outside of element\n   */\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      console.log('You clicked outside of me!');\n      this.props.function();\n    }\n  }\n\n  render() {\n\n    if (this.props.listen) {\n        document.addEventListener('click', this.handleClickOutside);\n    } else {\n        document.removeEventListener('click', this.handleClickOutside);\n    }\n\n    return <div ref={this.setWrapperRef}>{this.props.children}</div>;\n  }\n}\n\n// OutsideWatcher.propTypes = {\n//   children: PropTypes.element.isRequired,\n// };\n\nexport default OutsideWatcher","import React from 'react';\nimport './App.css';\nimport NotesListItem from './notesListItem.js';\nimport NoteArea from './NoteArea';\nimport Button from './button';\nimport DropDown from './dropdown';\nimport OutsideWatcher from './OutsideWatcher';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuOpen: false,\n      dropDownOpen: false,\n      noteList: null,\n      noteIndex: this.loadNoteIndex(),\n      currentNoteID: 0, // the note id\n      currentNoteIndex: null, // the index of current note in the noteList array \n      indexTicker: this.loadIndexTicker(),\n      currentNoteData: null,\n      smallScreen: false,\n      contentTimerID: null\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.loadNote = this.loadNote.bind(this);\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.saveNote = this.saveNote.bind(this);\n    this.createNewNote = this.createNewNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n    this.startSaveTimer = this.startSaveTimer.bind(this);\n    this.removeSaveTimer = this.removeSaveTimer.bind(this);\n  } \n\n  componentDidMount() {\n    console.log('componentDidMount');\n    this.loadNoteData();\n    if (this.state.noteIndex.length > 0) {\n      this.loadNote(this.state.noteIndex[0]);\n    } else {\n      this.createNewNote();\n    }\n\n    let viewportWidth = window.innerWidth;\n    let smallScreen = false;\n    if (viewportWidth < 640) {\n      smallScreen = true;\n    }\n    this.setState((state) => ({\n      smallScreen: smallScreen\n    }))\n  }\n\n  toggleMenu() {\n    console.log('toggle menu');\n    this.setState({\n      menuOpen: !this.state.menuOpen,\n      dropDownOpen: false\n    })\n  }\n\n  toggleDropDown() {\n    console.log('toggle dropdown');\n    this.setState({\n      dropDownOpen: !this.state.dropDownOpen\n    })\n  }\n\n  loadNoteIndex() {\n    var noteIndex;\n    if (localStorage.getItem('noteIndex') !== null) {\n      noteIndex = JSON.parse(localStorage.getItem('noteIndex'));\n    } else {\n      noteIndex = [];\n      localStorage.setItem('noteIndex', JSON.stringify(noteIndex));\n      // this.createNewNote();\n    }\n    return noteIndex;\n  }\n\n  loadNoteData() {\n    for (var i = 0; i < this.state.noteIndex.length; i++) {\n      this.setState({\n        ['note'+i]: JSON.parse(localStorage.getItem(this.state.noteIndex[i]))\n      });\n    }\n  }\n\n  loadIndexTicker() {\n    var indexTicker;\n    if(localStorage.getItem('indexTicker')) {\n      indexTicker = JSON.parse(localStorage.getItem('indexTicker'));\n    } else {\n      indexTicker = 0;\n      var indexTickerJSON = JSON.stringify(indexTicker);\n      localStorage.setItem('indexTicker', indexTickerJSON);\n    }\n    return indexTicker;\n  }\n\n  updateNoteIndex(id) {\n    let noteList;\n    if (this.state.noteIndex !== null) {\n      noteList = this.state.noteIndex;\n      noteList.push(id)\n    } else {\n      noteList = [id];\n    }\n    this.setState({\n      noteIndex: noteList\n    });\n    var noteListJSON = JSON.stringify(noteList);\n    localStorage.setItem('noteIndex', noteListJSON);\n\n  }\n\n  handleChange(event) {\n    // event.target.focus();\n    // this.saveNote(this.state.currentNoteData.title, event.target.value, this.state.currentNoteID);\n    this.setState({\n      currentNoteData: {\n        ...this.state.currentNoteData,\n        content: event.target.value\n      },\n      dropDownOpen: false\n    });\n  }\n\n  startSaveTimer(event, name) {\n    var originalContent = event.target.value;\n    if (name === 'contentTimer') {\n      var contentTimer = window.setInterval(() => {\n        if (originalContent !== this.state.currentNoteData.content) {\n          console.log('trigger a save babies');\n          originalContent = this.state.currentNoteData.content;\n          this.saveNote(this.state.currentNoteData.title, this.state.currentNoteData.content, this.state.currentNoteID);\n        }\n      }, 30000);\n\n      this.setState({\n        contentTimerID: contentTimer\n      })\n    }\n  }\n\n  removeSaveTimer(name) {\n    if (name === 'contentTimer') { \n      window.clearInterval(this.state.contentTimerID);\n    }\n  }\n\n  handleTitleChange(event, key) {\n    this.saveNote(event.target.value, this.state.currentNoteData.content, this.state.currentNoteID);\n    this.setState({\n      currentNoteData: {\n        ...this.state.currentNoteData,\n        title: event.target.value\n      },\n      ['note' + key]: {\n        ...this.state['note' + key],\n        title: event.target.value\n      },\n      dropDownOpen: false\n    }, () => console.log(this.state));\n  }\n\n  saveNote(title, content, id) {\n    var note = {\n      id: id,\n      title: title,\n      createdDate: \"May 16th, 2020\",\n      modifiedDate: + new Date(),\n      content: content\n    }\n    var noteJSON = JSON.stringify(note);\n    localStorage.setItem(id, noteJSON);\n  }\n\n  loadNote(id) {\n    console.log('load note ' + id);\n    var note = JSON.parse(localStorage.getItem(id));\n    var noteIndex = this.state.noteIndex.findIndex(noteIDs => noteIDs === id);\n    this.setState({\n      currentNoteID: id,\n      currentNoteIndex: noteIndex,\n      currentNoteData: note\n    });\n\n    if (this.state.smallScreen && this.state.menuOpen) {\n      this.toggleMenu();\n    }\n  }\n\n  createNewNote() {\n    var newIndexTicker = JSON.parse(localStorage.getItem('indexTicker')) + 1;\n    localStorage.setItem('indexTicker', JSON.stringify(newIndexTicker));\n    this.saveNote('Note ' + newIndexTicker, '', newIndexTicker);\n\n    this.setState({\n      currentNoteID: newIndexTicker,\n      currentNoteIndex: this.state.noteIndex.length,\n      ['note' + this.state.noteIndex.length]: {\n        title: 'Note ' + newIndexTicker\n      },\n      dropDownOpen: false\n    }, () => {\n      this.updateNoteIndex(newIndexTicker);\n      this.loadNote(newIndexTicker);\n      console.log(this.state);\n    })\n  }\n\n  deleteNote(id) {\n    localStorage.removeItem(id);\n    for (var i = 0; i < this.state.noteIndex.length; i++) {\n      if (this.state.noteIndex[i] === id) {\n        var newNoteList = this.state.noteIndex.slice();\n        newNoteList.splice(i, 1);\n        console.log(newNoteList);\n        localStorage.setItem('noteIndex', JSON.stringify(newNoteList));\n\n        if (newNoteList.length === 0) {\n          console.log('its zero');\n          this.createNewNote();\n        } else {\n          this.setState({\n            noteIndex: newNoteList,\n            currentNoteID: this.state.noteIndex[i - 1],\n            currentNoteIndex: i - 1,\n            dropDownOpen: false\n          });\n          this.loadNote(this.state.noteIndex[i - 1]);\n        }\n        \n        break\n      }\n    }\n  }\n\n  render() {\n    let noteListItems = [];\n    if (this.state.noteIndex !== null && this.state.currentNoteData !== null) {\n      for (var i = 0; i < this.state.noteIndex.length; i++) {\n        let title = '';\n        if (this.state['note' + i]) {\n          title = this.state['note' + i].title\n        }\n        noteListItems.push(<NotesListItem\n          loadNote={this.loadNote}\n          id={this.state.noteIndex[i]}\n          title={title}\n          activeTitle={this.state.currentNoteData.title}\n          key={i}\n          selectedNote={this.state.currentNoteID}\n        />);\n      }\n    }\n\n    let className = 'menu';\n    if (this.state.menuOpen) {\n      className += ' active'\n    }\n\n    return (\n      <div className=\"App\">\n        <Button label=\"Notes\" function={this.toggleMenu} position={'top-left'}/>\n        <Button label=\"Options\" function={this.toggleDropDown} position={'top-right'}/>\n        <OutsideWatcher function={this.toggleDropDown} listen={this.state.dropDownOpen}>\n          <DropDown\n            deleteNote={this.deleteNote}\n            currentNoteID={this.state.currentNoteID}\n            saveNote={this.saveNote}\n            dropDownOpen={this.state.dropDownOpen}\n          />\n        </OutsideWatcher>\n\n        <div className={className}>\n          <Button label=\"Close\" function={this.toggleMenu} />\n          <h1>Lock Note</h1>\n          <ul className=\"note-list\">\n            {noteListItems}\n          </ul>\n          <button className=\"dropDown__button\" onClick={() => this.createNewNote()}>New Note</button>\n        </div>\n\n        <NoteArea\n          currentNoteData={this.state.currentNoteData}\n          handleChange={this.handleChange}\n          handleTitleChange={this.handleTitleChange}\n          noteKey={this.state.currentNoteIndex}\n          startSaveTimer={this.startSaveTimer}\n          removeSaveTimer={this.removeSaveTimer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}