{"version":3,"sources":["notesListItem.js","NoteArea.js","button.js","dropdown.js","OutsideWatcher.js","views/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["NotesListItem","props","className","title","selectedNote","id","onClick","loadNote","NoteArea","content","currentNoteData","value","onChange","event","handleTitleChange","noteKey","handleChange","placeholder","onFocus","startSaveTimer","onBlur","removeSaveTimer","Button","position","function","args","label","DropDown","dropDownOpen","deleteNote","currentNoteID","OutsideWatcher","setWrapperRef","bind","handleClickOutside","node","this","wrapperRef","contains","target","console","log","listen","document","addEventListener","removeEventListener","ref","children","React","Component","SignIn","activeView","setActiveView","htmlFor","type","CryptoJS","require","App","state","menuOpen","noteList","noteIndex","loadNoteIndex","currentNoteIndex","indexTicker","loadIndexTicker","smallScreen","contentTimerID","toggleMenu","toggleDropDown","saveNote","createNewNote","loadNoteData","length","viewportWidth","window","innerWidth","setState","view","localStorage","getItem","JSON","parse","setItem","stringify","i","noteData","decrypt","alert","noteID","encryptedNote","bytes","AES","string","toString","enc","Utf8","error","indexTickerJSON","push","noteListJSON","name","originalContent","contentTimer","setInterval","clearInterval","key","note","createdDate","modifiedDate","Date","noteJSON","noteEncrypted","encrypt","decryptedData","findIndex","noteIDs","newIndexTicker","updateNoteIndex","removeItem","newNoteList","slice","splice","noteListItems","activeTitle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a238329.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NotesListItem(props) {\n    let className = '';\n    let title = props.title;\n    if (props.selectedNote === props.id) {\n        className += ' active';\n    }\n\n    return(\n        <li><button className={className} onClick={() => props.loadNote(props.id)}>{title}</button></li>\n    )\n}\n\nexport default NotesListItem","import React from 'react';\n\nfunction NoteArea(props) {\n    let title, content;\n    if (props.currentNoteData !== null) {\n        title = props.currentNoteData.title;\n        content = props.currentNoteData.content;\n    }\n    \n    return(\n        <div className=\"note-area\">\n            <textarea value={title} className=\"note-title\" onChange={(event) => props.handleTitleChange(event, props.noteKey)}></textarea>\n            <textarea value={content} className=\"note\" onChange={props.handleChange} placeholder=\"Write somethingâ€¦\" onFocus={(event) => props.startSaveTimer(event, 'contentTimer')} onBlur={() => props.removeSaveTimer('contentTimer')}></textarea>\n        </div>\n    )\n}\n\nexport default NoteArea","import React from 'react';\n\nfunction Button(props) {\n    let className = 'button ';\n    if (props.position) {\n        className += props.position;\n    }\n    \n    return(\n        <button className={className} onClick={() => props.function(props.args)}>\n            {props.label}\n        </button>\n    )\n}\n\nexport default Button","import React from 'react';\n\nfunction DropDown(props) {\n    let className = 'drop-down';\n    if (props.dropDownOpen) {\n        className += ' -active';\n    }\n    \n    return(\n        <div className={className}>\n            <button className=\"dropDown__button\" onClick={() => props.deleteNote(props.currentNoteID)}>Delete Note</button>\n        </div>\n    )\n}\n\nexport default DropDown","import React from 'react';\n\n/**\n * Component that alerts if you click outside of it\n */\nclass OutsideWatcher extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    // document.addEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    // document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  /**\n   * Set the wrapper ref\n   */\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  /**\n   * Alert if clicked on outside of element\n   */\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      console.log('You clicked outside of me!');\n      this.props.function();\n    }\n  }\n\n  render() {\n\n    if (this.props.listen) {\n        document.addEventListener('click', this.handleClickOutside);\n    } else {\n        document.removeEventListener('click', this.handleClickOutside);\n    }\n\n    return <div ref={this.setWrapperRef}>{this.props.children}</div>;\n  }\n}\n\n// OutsideWatcher.propTypes = {\n//   children: PropTypes.element.isRequired,\n// };\n\nexport default OutsideWatcher","import React from 'react';\nimport Button from '../button';\n\nfunction SignIn(props) {\n    let className = 'view';\n    if(props.activeView === 'SignIn') {\n        className += ' -active'\n    }\n    \n    return(\n        <div className={className}>\n            <Button label={'Cancel'} function={props.setActiveView} args={'Main'} />\n            <h1>Sign In</h1>\n            <p>Sign in to Lock Note to encrypt your notes.</p>\n            <label htmlFor=\"username\">Username</label>\n            <input type=\"text\" id=\"username\"></input>\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"text\" id=\"password\"></input>\n            <button>Submit</button>\n            <p>Don't have an account? Create one.</p>\n        </div>\n    )\n}\n\nexport default SignIn","import React from 'react';\nimport './App.css';\nimport NotesListItem from './notesListItem.js';\nimport NoteArea from './NoteArea';\nimport Button from './button';\nimport DropDown from './dropdown';\nimport OutsideWatcher from './OutsideWatcher';\nimport SignIn from './views/SignIn';\nvar CryptoJS = require(\"crypto-js\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeView: 'main',\n      menuOpen: false,\n      dropDownOpen: false,\n      noteList: null,\n      noteIndex: this.loadNoteIndex(),\n      currentNoteID: 0, // the note id\n      currentNoteIndex: null, // the index of current note in the noteList array \n      indexTicker: this.loadIndexTicker(),\n      currentNoteData: null,\n      smallScreen: false,\n      contentTimerID: null\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.loadNote = this.loadNote.bind(this);\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.saveNote = this.saveNote.bind(this);\n    this.createNewNote = this.createNewNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n    this.startSaveTimer = this.startSaveTimer.bind(this);\n    this.removeSaveTimer = this.removeSaveTimer.bind(this);\n    this.setActiveView = this.setActiveView.bind(this);\n  } \n\n  componentDidMount() {\n    this.loadNoteData();\n    if (this.state.noteIndex.length > 0) {\n      this.loadNote(this.state.noteIndex[0]);\n    } else {\n      this.createNewNote();\n    }\n\n    let viewportWidth = window.innerWidth;\n    let smallScreen = false;\n    if (viewportWidth < 640) {\n      smallScreen = true;\n    }\n    this.setState((state) => ({\n      smallScreen: smallScreen\n    }))\n  }\n\n  setActiveView(view) {\n    console.log('setActiveView');\n    console.log(view);\n    this.setState({\n      activeView: view\n    });\n  }\n\n  toggleMenu() {\n    console.log('toggle menu');\n    this.setState({\n      menuOpen: !this.state.menuOpen,\n      dropDownOpen: false\n    })\n  }\n\n  toggleDropDown() {\n    console.log('toggle dropdown');\n    this.setState({\n      dropDownOpen: !this.state.dropDownOpen\n    })\n  }\n\n  loadNoteIndex() {\n    var noteIndex;\n    if (localStorage.getItem('noteIndex') !== null) {\n      noteIndex = JSON.parse(localStorage.getItem('noteIndex'));\n    } else {\n      noteIndex = [];\n      localStorage.setItem('noteIndex', JSON.stringify(noteIndex));\n      // this.createNewNote();\n    }\n    return noteIndex;\n  }\n\n  loadNoteData() {\n    for (var i = 0; i < this.state.noteIndex.length; i++) {\n      let noteData = this.decrypt(this.state.noteIndex[i]);\n      if (noteData === null) {\n        window.alert('Your password is incorrect.')\n      }\n      this.setState({\n        ['note'+i]: noteData\n      }, console.log(this.state['note'+i]));\n    }\n  }\n\n  decrypt(noteID) {\n    console.log('decrypt!');\n    var encryptedNote = localStorage.getItem(noteID);\n    var bytes = CryptoJS.AES.decrypt(encryptedNote, 'password');\n    try {\n      var string = bytes.toString(CryptoJS.enc.Utf8);\n    } catch (error) {\n      return null\n    }\n\n    try {\n      var decryptedData = JSON.parse(string);\n      return decryptedData;\n    } catch (error) {\n      return null\n    }\n    \n  }\n\n  loadIndexTicker() {\n    var indexTicker;\n    if(localStorage.getItem('indexTicker')) {\n      indexTicker = JSON.parse(localStorage.getItem('indexTicker'));\n    } else {\n      indexTicker = 0;\n      var indexTickerJSON = JSON.stringify(indexTicker);\n      localStorage.setItem('indexTicker', indexTickerJSON);\n    }\n    return indexTicker;\n  }\n\n  updateNoteIndex(id) {\n    let noteList;\n    if (this.state.noteIndex !== null) {\n      noteList = this.state.noteIndex;\n      noteList.push(id)\n    } else {\n      noteList = [id];\n    }\n    this.setState({\n      noteIndex: noteList\n    });\n    var noteListJSON = JSON.stringify(noteList);\n    localStorage.setItem('noteIndex', noteListJSON);\n\n  }\n\n  handleChange(event) {\n    // event.target.focus();\n    // this.saveNote(this.state.currentNoteData.title, event.target.value, this.state.currentNoteID);\n    this.setState({\n      currentNoteData: {\n        ...this.state.currentNoteData,\n        content: event.target.value\n      },\n      dropDownOpen: false\n    });\n  }\n\n  startSaveTimer(event, name) {\n    var originalContent = event.target.value;\n    if (name === 'contentTimer') {\n      var contentTimer = window.setInterval(() => {\n        if (originalContent !== this.state.currentNoteData.content) {\n          console.log('trigger a save babies');\n          originalContent = this.state.currentNoteData.content;\n          this.saveNote(this.state.currentNoteData.title, this.state.currentNoteData.content, this.state.currentNoteID);\n        }\n      }, 30000);\n\n      this.setState({\n        contentTimerID: contentTimer\n      })\n    }\n  }\n\n  removeSaveTimer(name) {\n    if (name === 'contentTimer') { \n      window.clearInterval(this.state.contentTimerID);\n    }\n  }\n\n  handleTitleChange(event, key) {\n    this.saveNote(event.target.value, this.state.currentNoteData.content, this.state.currentNoteID);\n    this.setState({\n      currentNoteData: {\n        ...this.state.currentNoteData,\n        title: event.target.value\n      },\n      ['note' + key]: {\n        ...this.state['note' + key],\n        title: event.target.value\n      },\n      dropDownOpen: false\n    }, () => console.log(this.state));\n  }\n\n  saveNote(title, content, id) {\n    var note = {\n      id: id,\n      title: title,\n      createdDate: \"May 16th, 2020\",\n      modifiedDate: + new Date(),\n      content: content\n    }\n    var noteJSON = JSON.stringify(note);\n    var noteEncrypted = CryptoJS.AES.encrypt(noteJSON, 'password').toString();\n    localStorage.setItem(id, noteEncrypted);\n  }\n\n  loadNote(id) {\n    // console.log('load note ' + id);\n    var noteEncrypted = localStorage.getItem(id);\n    // var noteDecryptedBytes = CryptoJS.AES.decrypt(noteEncrypted, 'password');\n    // var decryptedData = JSON.parse(noteDecryptedBytes.toString(CryptoJS.enc.Utf8));\n    var decryptedData = this.decrypt(id);\n\n    // var note = JSON.parse(localStorage.getItem(id));\n\n    var noteIndex = this.state.noteIndex.findIndex(noteIDs => noteIDs === id);\n    this.setState({\n      currentNoteID: id,\n      currentNoteIndex: noteIndex,\n      currentNoteData: decryptedData\n    });\n\n    if (this.state.smallScreen && this.state.menuOpen) {\n      this.toggleMenu();\n    }\n  }\n\n  createNewNote() {\n    var newIndexTicker = JSON.parse(localStorage.getItem('indexTicker')) + 1;\n    localStorage.setItem('indexTicker', JSON.stringify(newIndexTicker));\n    this.saveNote('Note ' + newIndexTicker, '', newIndexTicker);\n\n    this.setState({\n      currentNoteID: newIndexTicker,\n      currentNoteIndex: this.state.noteIndex.length,\n      ['note' + this.state.noteIndex.length]: {\n        title: 'Note ' + newIndexTicker\n      },\n      dropDownOpen: false\n    }, () => {\n      this.updateNoteIndex(newIndexTicker);\n      this.loadNote(newIndexTicker);\n      console.log(this.state);\n    })\n  }\n\n  deleteNote(id) {\n    localStorage.removeItem(id);\n    for (var i = 0; i < this.state.noteIndex.length; i++) {\n      if (this.state.noteIndex[i] === id) {\n        var newNoteList = this.state.noteIndex.slice();\n        newNoteList.splice(i, 1);\n        console.log(newNoteList);\n        localStorage.setItem('noteIndex', JSON.stringify(newNoteList));\n\n        if (newNoteList.length === 0) {\n          console.log('its zero');\n          this.createNewNote();\n        } else {\n          this.setState({\n            noteIndex: newNoteList,\n            currentNoteID: this.state.noteIndex[i - 1],\n            currentNoteIndex: i - 1,\n            dropDownOpen: false\n          });\n          this.loadNote(this.state.noteIndex[i - 1]);\n        }\n        \n        break\n      }\n    }\n  }\n\n  render() {\n    let noteListItems = [];\n    if (this.state.noteIndex !== null && this.state.currentNoteData !== null) {\n      for (var i = 0; i < this.state.noteIndex.length; i++) {\n        let title = '';\n        if (this.state['note' + i]) {\n          title = this.state['note' + i].title\n        }\n        noteListItems.push(<NotesListItem\n          loadNote={this.loadNote}\n          id={this.state.noteIndex[i]}\n          title={title}\n          activeTitle={this.state.currentNoteData.title}\n          key={i}\n          selectedNote={this.state.currentNoteID}\n        />);\n      }\n    }\n\n    let className = 'menu';\n    if (this.state.menuOpen) {\n      className += ' active'\n    }\n\n    return (\n      <div className=\"App\">\n        <Button label=\"Notes\" function={this.toggleMenu} position={'top-left'}/>\n        <Button label=\"Options\" function={this.toggleDropDown} position={'top-right'}/>\n        <OutsideWatcher function={this.toggleDropDown} listen={this.state.dropDownOpen}>\n          <DropDown\n            deleteNote={this.deleteNote}\n            currentNoteID={this.state.currentNoteID}\n            saveNote={this.saveNote}\n            dropDownOpen={this.state.dropDownOpen}\n          />\n        </OutsideWatcher>\n\n        <div className={className}>\n          <Button label=\"Close\" function={this.toggleMenu} />\n          <h1>Lock Note</h1>\n          <ul className=\"note-list\">\n            {noteListItems}\n          </ul>\n          <Button label=\"New Note\" function={this.createNewNote} />\n          <Button label=\"Sign In\" function={this.setActiveView} args={'SignIn'}/>\n\n        </div>\n\n        <NoteArea\n          currentNoteData={this.state.currentNoteData}\n          handleChange={this.handleChange}\n          handleTitleChange={this.handleTitleChange}\n          noteKey={this.state.currentNoteIndex}\n          startSaveTimer={this.startSaveTimer}\n          removeSaveTimer={this.removeSaveTimer}\n        />\n\n        <SignIn activeView={this.state.activeView} setActiveView={this.setActiveView} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}